library(BayesSPM)
library(BayesSPM)
library(BayesSPM)
library(BayesSPM)
library(BayesSPM)
library(BayesSPM)
library(BayesSPM)
out <- SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
Y = mvtnorm::rmvnorm(40,mean=rep(0,50))
grp=rep(c(1,2,3,4),each=10)
time=1:50
out <- SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
plot.SPMBayes(x=out, summary = T) ## Get summary plot
#' @param ... Further arguments passed to
#' #' @examples
#' Y = mvtnorm::rmvnorm(40,mean=rep(0,50))
#' grp=rep(c(1,2,3,4),each=10)
#' time=1:50
#' out <- SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
#' plot.SPMBayes(x=out, summary = T) ## Get summary plot
#' plot.SPMBayes(x=out, summary = F) ## Get SPM Map plot
#'
#' @export
plot.SPMBayes <- function(x, summary = TRUE,  ...) {
Mean <- sd <- time <- name <- SD <- PPH1 <- tH1c <- NULL
SUMMARY <- x$SUMMARY; PPq <- x$PPq; threshold <- x$threshold; Q.threshold <- x$Q.threshold
dat0Mean <- data.table::data.table(time=SUMMARY$time,SUMMARY[,startsWith(names(SUMMARY), c("Mean")), with=FALSE])
dat0Sd <- data.table::data.table(time=SUMMARY$time,SUMMARY[,startsWith(names(SUMMARY), c("SD")), with=FALSE])
dat <- data.table::data.table(tidyr::pivot_longer(dat0Mean,cols=-c(time), values_to = "Mean"), tidyr::pivot_longer(dat0Sd,cols=-c(time), values_to="SD")[,"SD"])
if(summary){
ggplot2::ggplot(data = dat, ggplot2::aes(x = time, y = Mean, color=name), size = 1) +
ggplot2::geom_line() +
ggplot2::geom_ribbon(ggplot2::aes(x = time, ymin = Mean - SD, ymax = Mean + SD, fill = name),
linetype = 2, alpha = 0.3) +
ggplot2::xlab("time (%)") +
ggplot2::ggtitle("mean Â± SD time series") +
ggplot2::scale_x_continuous(expand = c(0,0)) +
ggplot2::scale_y_continuous(expand = c(0,0)) +
ggplot2::theme_linedraw()
}else{
ggplot2::ggplot(data = SUMMARY, ggplot2::aes(x = time, y = PPH1)) +
ggplot2::geom_line(ggplot2::aes(y = PPH1), colour = "black", size = 1) +
ggplot2::geom_hline(yintercept = PPq, size = 0.5, linetype = "dashed") +
ggplot2::geom_hline(yintercept = threshold, size = 0.5, linetype = "dashed") +
ggplot2::geom_hline(yintercept = Q.threshold, size = 0.5, linetype = "dashed") +
ggplot2::annotate("text", x = 10, y = Q.threshold-0.01, label = paste0("Q <", round(Q.threshold,2))) +
ggplot2::annotate("text", x = 10, y = threshold+0.02, label =  paste("P(H1 | data) > ", threshold, sep="")) +
ggplot2::annotate("text", x = 10, y = 0.00, label =  paste("P(H0 | data) > ", threshold, sep="")) +
ggplot2::geom_ribbon(data = subset(SUMMARY, tH1c), ggplot2::aes(ymin = threshold, ymax = PPH1),
fill = "gray", alpha = 0.4) +
ggplot2::geom_ribbon(data = subset(SUMMARY, tH1c), ggplot2::aes(ymin = PPq, ymax = PPH1),
fill = "gray", alpha = 0.4) +
ggplot2::ylim(0,1) +
ggplot2::ylab("posterior probability") +
ggplot2::xlab("time (%)") +
ggplot2::ggtitle("Bayesian SPM: Posterior Probability Map") +
ggplot2::scale_x_continuous(expand = c(0,0)) +
ggplot2::theme_linedraw()
}
}
plot.SPMBayes(x=out, summary = T) ## Get summary plot
#' @param ... Further arguments passed to
#' #' @examples
#' Y = mvtnorm::rmvnorm(40,mean=rep(0,50))
#' grp=rep(c(1,2,3,4),each=10)
#' time=1:50
#' out <- SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
#' plot.SPMBayes(x=out, summary = T) ## Get summary plot
#' plot.SPMBayes(x=out, summary = F) ## Get SPM Map plot
#'
#' @export
plot.SPMBayes <- function(x, summary = TRUE,  ...) {
Mean <- sd <- time <- name <- SD <- PPH1 <- tH1c <- NULL
SUMMARY <- x$SUMMARY; PPq <- x$PPq; threshold <- x$threshold; Q.threshold <- x$Q.threshold
dat0Mean <- data.table::data.table(time=SUMMARY$time,SUMMARY[,startsWith(names(SUMMARY), c("Mean")), with=FALSE])
dat0Sd <- data.table::data.table(time=SUMMARY$time,SUMMARY[,startsWith(names(SUMMARY), c("SD")), with=FALSE])
dat <- data.table::data.table(tidyr::pivot_longer(dat0Mean,cols=-c(time), values_to = "Mean"), tidyr::pivot_longer(dat0Sd,cols=-c(time), values_to="SD")[,"SD"])
if(summary){
ggplot2::ggplot(data = dat, ggplot2::aes(x = time, y = Mean, color=name), size = 1) +
ggplot2::geom_line() +
ggplot2::geom_ribbon(ggplot2::aes(x = time, ymin = Mean - SD, ymax = Mean + SD, fill = name),
linetype = 2, alpha = 0.3) +
ggplot2::xlab("time (%)") +
ggplot2::ggtitle("mean ± SD time series") +
ggplot2::scale_x_continuous(expand = c(0,0)) +
ggplot2::scale_y_continuous(expand = c(0,0)) +
ggplot2::theme_linedraw()
}else{
ggplot2::ggplot(data = SUMMARY, ggplot2::aes(x = time, y = PPH1)) +
ggplot2::geom_line(ggplot2::aes(y = PPH1), colour = "black", size = 1) +
ggplot2::geom_hline(yintercept = PPq, size = 0.5, linetype = "dashed") +
ggplot2::geom_hline(yintercept = threshold, size = 0.5, linetype = "dashed") +
ggplot2::geom_hline(yintercept = Q.threshold, size = 0.5, linetype = "dashed") +
ggplot2::annotate("text", x = 10, y = Q.threshold-0.01, label = paste0("Q <", round(Q.threshold,2))) +
ggplot2::annotate("text", x = 10, y = threshold+0.02, label =  paste("P(H1 | data) > ", threshold, sep="")) +
ggplot2::annotate("text", x = 10, y = 0.00, label =  paste("P(H0 | data) > ", threshold, sep="")) +
ggplot2::geom_ribbon(data = subset(SUMMARY, tH1c), ggplot2::aes(ymin = threshold, ymax = PPH1),
fill = "gray", alpha = 0.4) +
ggplot2::geom_ribbon(data = subset(SUMMARY, tH1c), ggplot2::aes(ymin = PPq, ymax = PPH1),
fill = "gray", alpha = 0.4) +
ggplot2::ylim(0,1) +
ggplot2::ylab("posterior probability") +
ggplot2::xlab("time (%)") +
ggplot2::ggtitle("Bayesian SPM: Posterior Probability Map") +
ggplot2::scale_x_continuous(expand = c(0,0)) +
ggplot2::theme_linedraw()
}
}
plot.SPMBayes(x=out, summary = T) ## Get summary plot
library(BayesSPM)
sprintf("%X", as.integer(charToRaw("£")))
sprintf("%X", as.integer(charToRaw("±")))
sprintf("%X", as.integer(charToRaw("ggtitle")))
sprintf("%X", as.integer(charToRaw("%")))
#' @param ... Further arguments passed to ggplot2
#' @examples
#' Y = mvtnorm::rmvnorm(40,mean=rep(0,50))
#' grp=rep(c(1,2,3,4),each=10)
#' time=1:50
#' out <- SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
#' plot.SPMBayes(x=out, summary = T) ## Get summary plot
#' plot.SPMBayes(x=out, summary = F) ## Get SPM Map plot
#'
#' @export
plot.SPMBayes <- function(x, summary = TRUE,  ...) {
Mean <- sd <- time <- name <- SD <- PPH1 <- tH1c <- NULL
SUMMARY <- x$SUMMARY; PPq <- x$PPq; threshold <- x$threshold; Q.threshold <- x$Q.threshold
dat0Mean <- data.table::data.table(time=SUMMARY$time,SUMMARY[,startsWith(names(SUMMARY), c("Mean")), with=FALSE])
dat0Sd <- data.table::data.table(time=SUMMARY$time,SUMMARY[,startsWith(names(SUMMARY), c("SD")), with=FALSE])
dat <- data.table::data.table(tidyr::pivot_longer(dat0Mean,cols=-c(time), values_to = "Mean"), tidyr::pivot_longer(dat0Sd,cols=-c(time), values_to="SD")[,"SD"])
if(summary){
ggplot2::ggplot(data = dat, ggplot2::aes(x = time, y = Mean, color=name), size = 1) +
ggplot2::geom_line() +
ggplot2::geom_ribbon(ggplot2::aes(x = time, ymin = Mean - SD, ymax = Mean + SD, fill = name),
linetype = 2, alpha = 0.3) +
ggplot2::xlab("time (%)") +
ggplot2::ggtitle("mean \u00B1 SD time series") +
ggplot2::scale_x_continuous(expand = c(0,0)) +
ggplot2::scale_y_continuous(expand = c(0,0)) +
ggplot2::theme_linedraw()
}else{
ggplot2::ggplot(data = SUMMARY, ggplot2::aes(x = time, y = PPH1)) +
ggplot2::geom_line(ggplot2::aes(y = PPH1), colour = "black", size = 1) +
ggplot2::geom_hline(yintercept = PPq, size = 0.5, linetype = "dashed") +
ggplot2::geom_hline(yintercept = threshold, size = 0.5, linetype = "dashed") +
ggplot2::geom_hline(yintercept = Q.threshold, size = 0.5, linetype = "dashed") +
ggplot2::annotate("text", x = 10, y = Q.threshold-0.01, label = paste0("Q <", round(Q.threshold,2))) +
ggplot2::annotate("text", x = 10, y = threshold+0.02, label =  paste("P(H1 | data) > ", threshold, sep="")) +
ggplot2::annotate("text", x = 10, y = 0.00, label =  paste("P(H0 | data) > ", threshold, sep="")) +
ggplot2::geom_ribbon(data = subset(SUMMARY, tH1c), ggplot2::aes(ymin = threshold, ymax = PPH1),
fill = "gray", alpha = 0.4) +
ggplot2::geom_ribbon(data = subset(SUMMARY, tH1c), ggplot2::aes(ymin = PPq, ymax = PPH1),
fill = "gray", alpha = 0.4) +
ggplot2::ylim(0,1) +
ggplot2::ylab("posterior probability") +
ggplot2::xlab("time (%)") +
ggplot2::ggtitle("Bayesian SPM: Posterior Probability Map") +
ggplot2::scale_x_continuous(expand = c(0,0)) +
ggplot2::theme_linedraw()
}
}
plot.SPMBayes(x=out, summary = T)
plot(x=out, summary = T)
library(BayesSPM)
usethis::use_testthat(BayesSPM)
usethis::use_testthat(SPMBayes())
usethis::use_testthat(SPMBayes)
usethis::use_testthat()
test_check("BayesSPM")
library(BayesSPM)
usethis::use_testthat()
devtools::build_vignettes("BayesSPM")
devtools::build_vignettes()
getwd()
devtools::build_vignettes("C:/Users/u1271266/OneDrive - University of Utah/Books/Spring 2023/PHS 7045/SPMR-package/BayesSPM")
install.packages("BayesSPM_0.1.0.tar.gz", repos = NULL)
install.packages("BayesSPM_0.1.0.tar.gz", repos = NULL)
library(BayesSPM)
library(BayesSPM)
install.packages("BayesSPM_0.1.0.tar.gz", repos = NULL)
detach("package:BayesSPM", unload = TRUE)
install.packages("BayesSPM_0.1.0.tar.gz", repos = NULL)
install.packages("BayesSPM_0.1.0.tar.gz", repos = NULL)
install.packages("BayesSPM_0.0.0.9000.tar.gz", repos = NULL)
library(BayesSPM)
install.packages("BayesSPM_0.0.0.9000.tar.gz", repos = NULL)
Y = mvtnorm::rmvnorm(40,mean=rep(0,50))
grp=rep(c(1,2,3,4),each=10)
time=1:50
BayesSPM::SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
out <- BayesSPM::SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
plot(out)
plot(out,summary=F)
install.packages("BayesSPM_0.0.9000.tar.gz", repos = NULL)
install.packages("BayesSPM_0.0.9000.tar.gz", repos = NULL)
library(BayesSPM)
install.packages("BayesSPM_0.0.9000.tar.gz", repos = NULL)
install.packages("BayesSPM_0.0.9000.tar.gz", repos = NULL)
## Summaries of the data for preliminary plot
MEAN   = t(apply(Y, 2,  \(i) {agg <- stats::aggregate(i, list(group), FUN=mean, na.rm=T)
agg.out <- agg[,2]; names(agg.out)=paste0("Mean_",agg[,1]); return(agg.out)}))
detach("package:BayesSPM", unload = TRUE)
install.packages("BayesSPM_0.0.9000.tar.gz", repos = NULL)
library(BayesSPM)
out <- SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
Y = mvtnorm::rmvnorm(40,mean=rep(0,50))
grp=rep(c(1,2,3,4),each=10)
time=1:50
out <- SPMBayes(Y,group=grp, time, threshold=0.95, Q.threshold=0.05, Hypothesis="alt")
plot(x=out, summary = TRUE) ## Get summary plot
library(BayesSPM)
install.packages("BayesSPM_0.1.0.tar.gz", repos = NULL)
detach("package:BayesSPM", unload = TRUE)
install.packages("BayesSPM_0.1.0.tar.gz", repos = NULL)
